GFG Link : https://www.geeksforgeeks.org/problems/detect-cycle-using-dsu/1

class DisjointSet {
    vector<int> parent,size;
    public:
        DisjointSet(int n){
            parent.resize(n+1);
            size.resize(n+1,1);
            for(int i=0;i<=n;i++){
                parent[i] = i;
            }
        }
        int findParent(int node){
            if(node==parent[node])
                return node;
            return parent[node] = findParent(parent[node]);
        }

        void unionBySize(int u,int v){
            int ulp_u = parent[u];
            int ulp_v = parent[v];
            if(ulp_u==ulp_v) return;
            if(size[ulp_u]<size[ulp_v]){
                parent[ulp_u] = ulp_v;
                size[ulp_v] += size[ulp_u];
            }
            else{
                parent[ulp_v] = ulp_u;
                size[ulp_u] += size[ulp_v];
            }
        }
};

class Solution {
public:
    int detectCycle(int V, vector<int> adj[]) {
        DisjointSet ds(V);
        set<pair<int,int>> s;
        for (int u = 0; u < V; u++) {
            for (int v : adj[u]) {
                if(s.find({u,v})!=s.end() || s.find({v,u})!=s.end())
                    continue;
                s.insert({u,v});
                int ulp_u = ds.findParent(u);
                int ulp_v = ds.findParent(v);
                if (ulp_u == ulp_v) return true;
                ds.unionBySize(u, v);
            }
        }
        return false;
    }
};
