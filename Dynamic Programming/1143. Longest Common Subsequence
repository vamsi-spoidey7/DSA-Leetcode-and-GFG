GFG Link - https://practice.geeksforgeeks.org/problems/longest-common-subsequence-1587115620/1

Recursion

class Solution {
public:
    int lcs(int i,int j,string &text1,string &text2){
        if(i<0 || j<0) return 0;
        if(text1[i]==text2[j])
            return 1 + lcs(i-1,j-1,text1,text2);
        return max(lcs(i-1,j,text1,text2),lcs(i,j-1,text1,text2));
    }
    int longestCommonSubsequence(string text1, string text2) {
        int n = text1.length();
        int m = text2.length();
        return lcs(n-1,m-1,text1,text2);
    }
};

Memoization

class Solution {
public:
    int lcs(int i,int j,string &text1,string &text2,vector<vector<int>> &dp){
        if(i<0 || j<0) return 0;
        if(dp[i][j]!=-1)
            return dp[i][j];
        if(text1[i]==text2[j])
            return dp[i][j] = 1 + lcs(i-1,j-1,text1,text2,dp);
        return dp[i][j] = max(lcs(i-1,j,text1,text2,dp),lcs(i,j-1,text1,text2,dp));
    }
    int longestCommonSubsequence(string text1, string text2) {
        int n = text1.length();
        int m = text2.length();
        vector<vector<int>> dp(n,vector<int>(m,-1));
        return lcs(n-1,m-1,text1,text2,dp);
    }
};

Shifting of index 

since we cannot reprenset -1 for base case we will shift the index

class Solution {
public:
    int lcs(int i,int j,string &text1,string &text2,vector<vector<int>> &dp){
        if(i==0 || j==0) return 0;
        if(dp[i][j]!=-1)
            return dp[i][j];
        if(text1[i-1]==text2[j-1])
            return dp[i][j] = 1 + lcs(i-1,j-1,text1,text2,dp);
        return dp[i][j] = max(lcs(i-1,j,text1,text2,dp),lcs(i,j-1,text1,text2,dp));
    }
    int longestCommonSubsequence(string text1, string text2) {
        int n = text1.length();
        int m = text2.length();
        vector<vector<int>> dp(n+1,vector<int>(m+1,-1));
        return lcs(n,m,text1,text2,dp);
    }
};

Tabulation

class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int n = text1.length();
        int m = text2.length();
        vector<vector<int>> dp(n+1,vector<int>(m+1,0));

        // base case
        for(int i=0;i<n;i++)
            dp[i][0] = 0;
        for(int i=0;i<m;i++)
            dp[0][i] = 0;

        // copy the recuurence
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(text1[i-1]==text2[j-1])
                    dp[i][j] = 1 + dp[i-1][j-1];
                else
                    dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
            }
        }
 
        return dp[n][m];
    }
};

Space optimization

class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int n = text1.length();
        int m = text2.length();
        vector<int> prev(m+1,0);

        // base case
        for(int i=0;i<m;i++)
            prev[i] = 0;

        // copy the recuurence
        for(int i=1;i<=n;i++){
            vector<int> curr(m+1,0);
            for(int j=1;j<=m;j++){
                if(text1[i-1]==text2[j-1])
                    curr[j] = 1 + prev[j-1];
                else
                    curr[j] = max(prev[j],curr[j-1]);
            }
            prev = curr;
        }
 
        return prev[m];
    }
};


