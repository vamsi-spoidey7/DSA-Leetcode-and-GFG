GFG Link : https://practice.geeksforgeeks.org/problems/avl-tree-deletion/0

/* Node is as follows:

struct Node
{
	int data, height;
	Node *left, *right;
	Node(int x)
	{
		data = x;
		height = 1;
		left = right = NULL;
	}
};

*/
int height(Node *node){
    if(node==NULL) return 0;
    return node->height;
}
int getBalance(Node *node){
    if(node==NULL) return 0;
    return height(node->left) - height(node->right);
}
Node* leftRotate(Node *node){
    Node* nodeRight = node->right;
    Node* nodeRightLeft = nodeRight->left;
    nodeRight->left = node;
    node->right = nodeRightLeft;
    
    // Update the heights of node and nodeRight
    node->height = 1 + max(height(node->left),height(node->right));
    nodeRight->height = 1 + max(height(nodeRight->left),height(nodeRight->right));
    return nodeRight;
}
Node* rightRotate(Node *node){
    Node* nodeLeft = node->left;
    Node* nodeLeftRight = nodeLeft->right;
    nodeLeft->right = node;
    node->left = nodeLeftRight;
    
    // Update the heights of node and nodeLeft
    node->height = 1 + max(height(node->left),height(node->right));
    nodeLeft->height = 1 + max(height(nodeLeft->left),height(nodeLeft->right));
    return nodeLeft;
}
Node* inorderSucc(Node *node){
    while(node!=NULL && node->left!=NULL)
        node = node->left;
    return node;
}
Node* deleteNode(Node* root, int data)
{
    //add code here,
    if(root==NULL) return root;
    if(data < root->data)
        root->left = deleteNode(root->left,data);
    else if(data > root->data)
        root->right = deleteNode(root->right,data);
    else{
        if(root->left==NULL && root->right==NULL)
            return NULL;
        else if(root->left==NULL)
            return root->right;
        else if(root->right==NULL)
            return root->left;
        else{
            Node *inSucc = inorderSucc(root->right);
            root->data = inSucc->data;
            root->right = deleteNode(root->right,inSucc->data);
        }
    }
    
    root->height = 1+max(height(root->left),height(root->right));
    int balance = getBalance(root);
    
    // Left Left Case
    if(balance > 1 && getBalance(root->left) >= 0)
        return rightRotate(root);
    
    // Right Right Case
    if(balance < -1 && getBalance(root->right) <= 0)
        return leftRotate(root);
    
    // Left Right Case
    if(balance > 1 && getBalance(root->left) < 0 ){
        root->left = leftRotate(root->left);
        return rightRotate(root);
    }
    
    // Right Left Case
    if(balance < -1 && getBalance(root->right) > 0){
        root->right = rightRotate(root->right);
        return leftRotate(root);
    }
    
    return root;
}
