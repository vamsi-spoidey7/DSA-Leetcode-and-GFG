class Solution {
public:
    TreeNode* insertIntoBST(TreeNode* root, int val) {
        if(root==NULL) return new TreeNode(val);
        if(val < root->val)
            root->left = insertIntoBST(root->left,val);
        else if(val > root->val)
            root->right = insertIntoBST(root->right,val);
        return root;
    }
};

class Solution {
public:
    TreeNode* insertIntoBST(TreeNode* root, int val) {
        if(root==NULL) return new TreeNode(val);
        TreeNode *node = root;
        while(node){
            if(node->val < val){
                if(node->right==NULL){
                    node->right = new TreeNode(val);
                    return root;
                }else{
                    node = node->right;
                }
            }else{
                if(node->val > val){
                    if(node->left==NULL){
                        node->left = new TreeNode(val);
                        return root;
                    }else{
                        node = node->left;
                    }
                }
            }
        }
        return root;
    }
};
