GFG Link : /* The structure of the Node is
struct Node
{ 
    int data;
    Node *left;
    Node *right;
    int height;
};
*/

class Solution{
  public:
    /*You are required to complete this method */
    int height(Node *node){
        if(node==NULL) return 0;
        return node->height;
    }
    int getBalance(Node *node){
        if(node==NULL) return 0;
        return height(node->left)-height(node->right);
    }
    Node* leftRotate(Node *node){
        Node* nodeRight = node->right;
        Node* nodeRightLeft = nodeRight->left;
        nodeRight->left = node;
        node->right = nodeRightLeft;
        
        // Update the heights of node and nodeRight
        node->height = 1 + max(height(node->left),height(node->right));
        nodeRight->height = 1 + max(height(nodeRight->left),height(nodeRight->right));
        return nodeRight;
    }
    Node* rightRotate(Node *node){
        Node* nodeLeft = node->left;
        Node* nodeLeftRight = nodeLeft->right;
        nodeLeft->right = node;
        node->left = nodeLeftRight;
        
        // Update the heights of node and nodeLeft
        node->height = 1 + max(height(node->left),height(node->right));
        nodeLeft->height = 1 + max(height(nodeLeft->left),height(nodeLeft->right));
        return nodeLeft;
    }
    Node* insertToAVL(Node* root, int data)
    {
        
        // Step 1 : Perform Normal BST Insertion
        if(root==NULL) return new Node(data);
        if(data < root->data) 
            root->left = insertToAVL(root->left,data);
        else if(data > root->data)
            root->right = insertToAVL(root->right,data);
        else // duplicates not allowed
            return root;
            
        
        // Step 2 : Update height of this node
        root->height = 1+max(height(root->left),height(root->right));
        
        
        
        /* Step 3 : Get the balance factor of this ancestor
        node to check whether this node became unbalanced */
        int balance = getBalance(root);
        
        
        
        // Step 4 : If this node becomes unbalanced, then there are 4 cases
        
        // Left Left Case
        if(balance > 1 && data < root->left->data)
            return rightRotate(root);
        
        // Right Right Case
        if(balance < -1 && data > root->right->data)
            return leftRotate(root);
        
        // Left Right Case
        if(balance > 1 && data > root->left->data){
            root->left = leftRotate(root->left);
            return rightRotate(root);
        }
        
        // Right Left Case
        if(balance < -1 && data < root->right->data){
            root->right = rightRotate(root->right);
            return leftRotate(root);
        }
        
        return root;
    }
    
};
