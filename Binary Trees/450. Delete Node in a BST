class Solution {
public:
    TreeNode* inorderSucc(TreeNode *node){
        while(node!=NULL && node->left!=NULL)
            node = node->left;
        return node;
    }
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(root==NULL) return root;
        if(key < root->val)
            root->left = deleteNode(root->left,key);
        else if(key > root->val)
            root->right = deleteNode(root->right,key);
        else{
            if(root->left==NULL && root->right==NULL) return NULL;
            else if(root->left==NULL) return root->right;
            else if(root->right==NULL) return root->left;
            else{
                TreeNode *inSucc = inorderSucc(root->right);
                root->val = inSucc->val;
                root->right = deleteNode(root->right,inSucc->val);
            }
        }
        return root;
    }
};

class Solution {
public:
    TreeNode* findLastRight(TreeNode *root){
        while(root->right!=NULL){
            root = root->right;
        }
        return root;
    }
    TreeNode* helper(TreeNode *root){
        if(root->right==NULL){
            return root->left;
        }else if(root->left==NULL){
            return root->right;
        }
        TreeNode *rightChild = root->right;
        TreeNode *lastRight = findLastRight(root->left);
        lastRight->right = rightChild;
        return root->left;
    }
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(root==NULL) return NULL;
        if(root->val==key){
            return helper(root);
        }
        TreeNode *dummy = root;
        while(root!=NULL){
            if(root->val > key){
                if(root->left!=NULL && root->left->val==key){
                    root->left = helper(root->left);
                    break;
                }else{
                    root = root->left;
                }
            }else{
                if(root->right!=NULL && root->right->val==key){
                    root->right = helper(root->right);
                    break;
                }else{
                    root = root->right;
                }
            }
        }
        return dummy;
    }
};
